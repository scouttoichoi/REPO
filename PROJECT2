import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import psycopg2
from datetime import datetime

# Hàm để mở cửa sổ chính sau khi login thành công
def open_main_window():
    global window, cur, conn

    window = tk.Tk()
    window.title("Quản lý thực phẩm")

    # Clear mọi thứ đã nhập khi lỗi xảy ra
    def clear_entries():
        entry_ID.delete(0, tk.END)
        entry_tensp.delete(0, tk.END)
        combobox_loaisp.set('')
        combobox_vitamin.set('')
        entry_dactri.delete(0, tk.END)

    # Load lại dữ liệu (giống nút F5)
    def load_data():
        for item in tree.get_children():
            tree.delete(item)

        cur.execute("SELECT * FROM setthucpham")
        rows = cur.fetchall()

        for row in rows:
            tree.insert("", tk.END, values=row)

    # Thêm sản phẩm
    def them_sp():
        id_sanpham = entry_ID.get()
        tensp = entry_tensp.get()
        loaisp = combobox_loaisp.get()
        vitamin = combobox_vitamin.get()
        dactri = entry_dactri.get()
        current_time = datetime.now() # Cập nhật ngày giờ
        
        if not (id_sanpham and tensp and loaisp and vitamin and dactri):
            messagebox.showwarning("Cảnh báo", "Vui lòng nhập đầy đủ thông tin.")
            return
        
        try:
            cur.execute("SELECT * FROM setthucpham WHERE id = %s", (id_sanpham,))
            if cur.fetchone():
                messagebox.showwarning("Lưu ý", f"ID '{id_sanpham}' đã tồn tại. Vui lòng nhập ID khác.")
                return
            
            cur.execute("INSERT INTO setthucpham (id, tensp, loaisp, vitamin, dactri, timecreate) VALUES (%s ,%s, %s, %s, %s, %s)", 
                        (id_sanpham, tensp, loaisp, vitamin, dactri, current_time))
            conn.commit()
            messagebox.showinfo("Thành công", "Thêm sản phẩm thành công")
            clear_entries()
            load_data()

        except Exception as e:
            messagebox.showerror("Thất bại", f"Vui lòng thêm lại sản phẩm. Chi tiết lỗi: {str(e)}")

    # Hiển thị sản phẩm
    def hienthi_sp():
        for row in tree.get_children():
            tree.delete(row)
        try:
            cur.execute("SELECT * FROM setthucpham")
            rows = cur.fetchall()

            for row in rows:
                tree.insert("", tk.END, values=row)
        except psycopg2.Error as e:
            messagebox.showerror("Lỗi", f"Không thể truy vấn dữ liệu. Chi tiết lỗi: {str(e)}")
            conn.rollback()

    # Xóa sản phẩm đã thêm
    def xoa_sp():
        selected_item = tree.focus()
        if not selected_item:
            messagebox.showwarning("Cảnh báo", "Vui lòng chọn một sản phẩm để xóa.")
            return

        confirm = messagebox.askyesno("Xác nhận", "Bạn có chắc chắn muốn xóa sản phẩm này?")
        if confirm:
            id_sanpham = tree.item(selected_item, 'values')[0]
            try:
                cur.execute("DELETE FROM setthucpham WHERE id=%s", (id_sanpham,))
                conn.commit()
                messagebox.showinfo("Thành công", "Xóa sản phẩm thành công!")
            except Exception as e:
                messagebox.showerror("Lỗi", f"Không thể xóa sản phẩm. Chi tiết lỗi: {str(e)}")
            load_data()

    # Cập nhật sản phẩm
    def capnhat_sp():
        product_id = entry_ID.get()
        tensp = entry_tensp.get()
        loaisp = combobox_loaisp.get()
        vitamin = combobox_vitamin.get()
        dactri = entry_dactri.get()
        current_time = datetime.now()

        if not (product_id and tensp and loaisp and vitamin and dactri):
            messagebox.showwarning("Cảnh báo", "Vui lòng nhập đầy đủ thông tin.")
            return

        try:
            cur.execute("UPDATE setthucpham SET tensp = %s, loaisp = %s, vitamin = %s, dactri = %s, timeupdate = %s WHERE ID = %s", 
                        (tensp, loaisp, vitamin, dactri, current_time, product_id))
            conn.commit()
            messagebox.showinfo("Thành công", "Cập nhật sản phẩm thành công")
            clear_entries()
            load_data()
        except psycopg2.Error as e:
            messagebox.showerror("Lỗi", f"Vui lòng kiểm tra lại. Chi tiết lỗi: {str(e)}")
            conn.rollback()


    def timkiem_sp():
        keyword = entry_search.get().strip()
        if not keyword:
            messagebox.showwarning("Cảnh báo", "Vui lòng nhập từ khóa để tìm kiếm.")
            return
        
        # Xóa dữ liệu cũ trong bảng
        for row in tree.get_children():
            tree.delete(row)

        try:
            # Truy vấn tìm kiếm
            query = """
                SELECT * FROM setthucpham 
                WHERE LOWER(tensp) LIKE %s OR LOWER(loaisp) LIKE %s OR LOWER(vitamin) LIKE %s
            """
            search_keyword = f"%{keyword.lower()}%"
            cur.execute(query, (search_keyword, search_keyword, search_keyword))
            rows = cur.fetchall()

            if rows:
                for row in rows:
                    tree.insert("", tk.END, values=row)
            else:
                messagebox.showinfo("Kết quả", "Không tìm thấy sản phẩm nào phù hợp.")
        except psycopg2.Error as e:
            messagebox.showerror("Lỗi", f"Không thể tìm kiếm. Chi tiết lỗi: {str(e)}")

    # Giao diện chính
    tk.Label(window, text="ID").grid(row=0, column=0)
    entry_ID = tk.Entry(window)
    entry_ID.grid(row=0, column=1)

    tk.Label(window, text="Tên thực phẩm").grid(row=1, column=0)
    entry_tensp = tk.Entry(window)
    entry_tensp.grid(row=1, column=1)

    tk.Label(window, text="Loại").grid(row=2, column=0)
    combobox_loaisp = ttk.Combobox(window, width=17, values=["Rau", "Trái cây", "Thịt", "Cá", "Nhân sâm", "Khác"], state="readonly")
    combobox_loaisp.grid(row=2, column=1)

    tk.Label(window, text="Vitamin cung ứng").grid(row=3, column=0)
    combobox_vitamin = ttk.Combobox(window, width=17, values=["Vitamin A", "Vitamin D", "Vitamin E", "Vitamin K", "Vitamin B1", "Vitamin B2", "Vitamin B3", "Vitamin B5", "Vitamin B6", "Vitamin B7", "Vitamin B9", "Vitamin B12", "Vitamin C", "Khác"], state="readonly")
    combobox_vitamin.grid(row=3, column=1)

    tk.Label(window, text="Trị bệnh").grid(row=4, column=0)
    entry_dactri = tk.Entry(window)
    entry_dactri.grid(row=4, column=1)

    tk.Label(window, text="Tìm kiếm sản phẩm").grid(row=6, column=0, padx=5, pady=5)
    entry_search = tk.Entry(window)
    entry_search.grid(row=6, column=1, padx=5, pady=5)

    # Nút chức năng
    tk.Button(window, text="Thêm sản phẩm", command=them_sp).grid(row=0, column=2, padx=5, pady=5)
    tk.Button(window, text="Cập nhật sản phẩm", command=capnhat_sp).grid(row=1, column=2, padx=5, pady=5)
    tk.Button(window, text="Xóa sản phẩm", command=xoa_sp).grid(row=2, column=2, padx=5, pady=5)
    tk.Button(window, text="Hiển thị sản phẩm", command=hienthi_sp).grid(row=3, column=2, padx=5, pady=5)
    tk.Button(window, text="Tìm kiếm", command=timkiem_sp).grid(row=6, column=2, padx=5, pady=5)

    # Bảng dữ liệu
    tree = ttk.Treeview(window, columns=("ID", "Tên sản phẩm", "Loại sản phẩm", "Vitamin cung ứng", "Trị bệnh", "Thời gian thêm", "Thời gian cập nhật"), show="headings", height=20)
    tree.grid(row=5, column=0, columnspan=3, padx=5, pady=10)

    # Tiêu đề các cột
    for col in tree["columns"]:
        tree.heading(col, text=col)
        tree.column(col, anchor='center')

    window.mainloop()

# Hàm kiểm tra đăng nhập
def check_login(username, password):
    try:
        global conn, cur
        conn = psycopg2.connect(
            host="localhost",
            database="dinhduong2",
            user=username,
            password=password,
            port="5432"
        )
        cur = conn.cursor()
        messagebox.showinfo("Thành công", "Đăng nhập thành công!")
        login_window.destroy()  # Đóng cửa sổ login sau khi thành công
        open_main_window()  # Mở cửa sổ chính

    except Exception as e:
        messagebox.showerror("Lỗi", f"Không thể kết nối cơ sở dữ liệu. Chi tiết: {str(e)}")

# Cửa sổ login
login_window = tk.Tk()
login_window.title("Đăng nhập cơ sở dữ liệu")

tk.Label(login_window, text="Tên đăng nhập").grid(row=0, column=0, padx=10, pady=10)
entry_username = tk.Entry(login_window)
entry_username.grid(row=0, column=1, padx=10, pady=10)

tk.Label(login_window, text="Mật khẩu").grid(row=1, column=0, padx=10, pady=10)
entry_password = tk.Entry(login_window, show="*")
entry_password.grid(row=1, column=1, padx=10, pady=10)

tk.Button(login_window, text="Đăng nhập", command=lambda: check_login(entry_username.get(), entry_password.get())).grid(row=2, column=0, columnspan=2, padx=10, pady=10)

login_window.mainloop()
